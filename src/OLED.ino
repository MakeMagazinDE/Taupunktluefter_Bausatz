//////////////////////////////////////////////////////////////////////////////
// Das Taupunkt-Lüftungssystem 
// mit dem ESP32-CAM
// 
// veröffentlicht im MAKE Sonderheft 2/2023
//
// Ulrich Schmerold
// 8/2023
//////////////////////////////////////////////////////////////////////////////
#define I2C_SDA 21    //  Pin für die i2C Schnittstelle (SDA)
#define I2C_SCL 22    //  Pin für die i2C Schnittstelle (SCL)


#define OLED_delay_1 100
#define OLED_delay_2 100

//***************************************** Sonderzeichen definieren ******************************************************
const static uint8_t Sonderzeichen[][9] PROGMEM = {
  {B00000000,B00000000,B00000000,B00000111,B00000101,B00000111,B00000000,B00000000}, //0 Grad (°)
  {B00000000,B00000000,B11111111,B00000000,B00000000,B00000000,B00000000,B00000000}, //1 senkrechter Strich (|)
  {B00111010,B01000000,B01000000,B00111010,B01000000,B00000000,B00000000,B00000000}, //2 ü
  {B00111010,B01000100,B01000100,B01000100,B00111010,B00000000,B00000000,B00000000}, //3 ö
  {B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B00011100,B00011100},  //4 Balken
  {B11111111,B10000001,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111}   // Quadrat
 };   
//-----------------------------------------------------------------------------------------------------------


 void drawSonderzeichen(byte index, bool invers ) {
  size_t s = sizeof Sonderzeichen[index];
  uint8_t tmp;
  for(unsigned int i = 0; i < s; i++) {
    tmp = (pgm_read_byte(&Sonderzeichen[index][i]));
    if (invers) tmp = tmp ^ B11111111; 
    oled.drawByte(tmp);
  }
}

//-----------------------------------------------------------------------------------------------------------
void OLED_update(){
  if (use_OLED == true)
  {    
    oled.update();
  }
}
//-----------------------------------------------------------------------------------------------------------

void OLED_clear()
{
  if (use_OLED == true)
  {  
    oled.clear(); 
  }
}
//-----------------------------------------------------------------------------------------------------------


void OLED_init(){  
  if (use_OLED == true)
  {  
   Wire.begin(I2C_SDA, I2C_SCL, 100000); // Mögliche Werte für Geschwindigkeit (Hz): 800000, 400000, 100000
   oled.init();
   oled.setScale(1);
   OLED_clear();
   OLED_update();
  }
}
//-----------------------------------------------------------------------------------------------------------

void OLED_setCursor(byte Zeile, byte Spalte ){
  if (use_OLED == true)
  {  
    oled.setCursor((Spalte*6) , Zeile); 
  }
}

//-----------------------------------------------------------------------------------------------------------
void OLED_print_char(char c, byte Zeile, byte Spalte)
{
    OLED_setCursor(Zeile, Spalte);
    oled.print(c);  
}
//-----------------------------------------------------------------------------------------------------------

void OLED_println(String Text, byte Zeile, byte Spalte)
{
 if (use_OLED == true)
 {
  //    Bildschirmgröße in Zeichen:
  //    Zeile: 0 - 7
  //    Spalte 0 - 20
  
  if (Zeile>7) Zeile = 7;
  if (Spalte > 20) Spalte=20;
  if ((Spalte + Text.length()) > 20) Text.remove(21-Spalte); // remove (index) ==> vom Index bis ende String entfernen
  OLED_setCursor(Zeile, Spalte);
  oled.print(Text); 
 }
}
//-----------------------------------------------------------------------------------------------------------

void OLED_print(String Text)
{
  if (use_OLED == true)
  {  
    oled.print(Text); 
  }
}
//-----------------------------------------------------------------------------------------------------------


void show_Kontaktbildschirm()
{  
    oled.invertText(false);
    oled.setScale(1);
   OLED_clear();
   OLED_println("Taupunktl",0,3); 
    drawSonderzeichen(2);// Sonderzeichen ü
   OLED_print("fter");
   
   OLED_println( "V ",1,7); OLED_print(Software_version);
   
   OLED_println("Schmerold",3,0); 
   OLED_println("Programmtechnik",4,0); 
   OLED_println("Taupunktluefter.de",6,0); 
   OLED_println("08232 / 908698",7,0); 
   OLED_update();
}

void show_Wertebildschirm()
{
 char buffer_1[6];
 char buffer_2[6];
 OLED_clear();

  sprintf(buffer_1, "%.1f", t1);          // Nachkommastellen bis auf eine Stelle streichen;
  OLED_println("S1: ",0,0);
  OLED_print(buffer_1); 
   drawSonderzeichen(0);// Sonderzeichen °C
 OLED_print("C");
   drawSonderzeichen(1);// Sonderzeichen |
  OLED_print(String(h1));
  OLED_print(" %");
  Serial_Debugging_println("Sensor 1:  " + String(buffer_1) + "°C   |   "+String(h1)+" %");
  
  sprintf(buffer_1, "%.1f", t2);          // Nachkommastellen bis auf eine Stelle streichen;
  OLED_println("S2: ",1,0);
  OLED_print(buffer_1); 
   drawSonderzeichen(0);// Sonderzeichen °C
 OLED_print("C");
   drawSonderzeichen(1);// Sonderzeichen |
  OLED_print(String(h2));
  OLED_print(" %");
   Serial_Debugging_println("Sensor 2:  " + String(buffer_1) + "°C   |   "+String(h2)+" %");

   sprintf(buffer_1, "%.1f", Taupunkt_1);    // Nachkommastellen bis auf eine Stelle streichen;
   OLED_println("Taupunkt 1: ",3,0);
   OLED_print(buffer_1); 
   drawSonderzeichen(0);// Sonderzeichen °C
   OLED_print("C");
  
   sprintf(buffer_2, "%.1f", Taupunkt_2);     // Nachkommastellen bis auf eine Stelle streichen;
   OLED_println("Taupunkt 2: ",4,0);
   OLED_print(buffer_2); 
   drawSonderzeichen(0);// Sonderzeichen °C
   OLED_print("C");
   Serial_Debugging_println("Taupunkt 1: " + String(buffer_1) +" °C |  Taupunkt 2: " + String(buffer_2) +" °C");
 
  DeltaTP = Taupunkt_1 - Taupunkt_2;
  OLED_println("Delta TP: ",6,0); 
  OLED_print(String(DeltaTP));
   drawSonderzeichen(0);// Sonderzeichen °C
  OLED_print("C");
  if (rel == true)
  {
    OLED_println("Relais: L",7,0); 
    drawSonderzeichen(2);   // Sonderzeichen ü
    OLED_print("fter AN"); 
  } else {
    OLED_println("Relais: L",7,0); 
    drawSonderzeichen(2);   // Sonderzeichen ü
    OLED_print("fter AUS"); 
  }
   OLED_update();
}
//-----------------------------------------------------------------------------------------------------------

void show_Status()
{ 
  OLED_clear();
  OLED_println("- Status Seite -",0,2);
  if (use_WIFI == true)
  {
    make_time_stamp ();
    OLED_println(stamp,2,0); 
    OLED_println("SSID: "+ WiFi.SSID(),4,0);
    OLED_println("IP: "+WiFi.localIP().toString(),5,0);
    int rssi = WiFi.RSSI();
    OLED_println("RSSI: "+String(rssi)+" dBm",6,0);
  } else {
   if(use_WIFI == false)          OLED_println("WIFI ist deaktiviert" ,2,0);  else OLED_println("WIFI ist aktiviert" ,2,0);
   if(use_Highcharts == false)    OLED_println("Highcharts ist aus" ,4,0);    else OLED_println("Highcharts ist an" ,4,0);
   if(Datenspeicher < 1)      OLED_println("Datenspeicherung aus" ,3,0);  else OLED_println("Datenspeicherung an" ,3,0);
   if(use_Ampel == false)         OLED_println("Ampel ist deaktiviert" ,5,0); else OLED_println("Ampel ist aktiviert" ,5,0);
  }
 OLED_update();
}

//-----------------------------------------------------------------------------------------------------------
void Print_zurueck(byte zeile, bool inverse)
{
   OLED_println("     zur",zeile,2); 
   if (inverse)drawSonderzeichen(2, true); else drawSonderzeichen(2,false);// Sonderzeichen ü
   OLED_print("ck     "); 
}

//-----------------------------------------------------------------------------------------------------------
//https://diyusthad.com/image2cpp
// 'Taupunktlüfter_5.bmp, 128x53px
const unsigned char Taupunt_bitmap [] PROGMEM = { 
0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x60, 
  0x60, 0x60, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0x60, 
  0x7f, 0x7f, 0x7f, 0x70, 0x70, 0x70, 0x70, 0x70, 0x7e, 0x7f, 0x7f, 0x60, 0xe0, 0xc0, 0xc0, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0x30, 0xf0, 0xf0, 0x60, 0x60, 
  0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7c, 0xfe, 0xc7, 0x83, 0x01, 0x01, 0x01, 0x21, 0x13, 0x1e, 0x04, 0x00, 0x00, 0x07, 0x0f, 0x0c, 
  0x1c, 0x18, 0x18, 0x30, 0x30, 0x20, 0x20, 0x44, 0x06, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0xfc, 
  0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0x38, 0x00, 0x00, 0x01, 0x03, 
  0x07, 0x07, 0x0e, 0x3c, 0x78, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x70, 0xf0, 0xf0, 0x30, 0x30, 
  0x60, 0x60, 0x60, 0x60, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0x06, 0x0c, 0x1c, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x87, 0xc7, 0xe7, 0x67, 0x67, 0x77, 0x33, 0x33, 0x33, 
  0x33, 0x33, 0x13, 0x13, 0x13, 0x03, 0x0a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x82, 0x80, 0x80, 0x80, 
  0x83, 0x0f, 0xdf, 0xff, 0x7f, 0x7f, 0x7f, 0xdf, 0x9f, 0x07, 0x81, 0x80, 0x80, 0x80, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1e, 0x3c, 
  0x70, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0x71, 0x3f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x3e, 
  0x70, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0x60, 0x78, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0xe0, 0x3d, 0x06, 0x00, 0x01, 0x03, 0x07, 0x0e, 0x1c, 0x70, 0xe0, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0x18, 0x10, 0x30, 0x10, 0x18, 0x04, 0x00, 
  0x00, 0x0f, 0x7f, 0xf9, 0xc0, 0x00, 0x3e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x7f, 0x07, 0x0c, 0x0c, 0x0e, 0x37, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x1c, 0x00, 0xe0, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1c, 0xfc, 0x98, 0x18, 0x30, 0x60, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3e, 0xff, 0xc1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc1, 0xff, 0x3f, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 0x3c, 0x78, 0xe3, 0xc7, 0x8f, 0x9f, 0x1f, 0x0f, 0x0f, 0x07, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0f, 0x0f, 0x1f, 0x9f, 0x8f, 
  0xc7, 0xe7, 0x71, 0x38, 0x1e, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x80, 0xe0, 0xf8, 0x3e, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0c, 0x78, 
  0xf0, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x06, 0x06, 0x06, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07, 0x06, 0x06, 
  0xfe, 0xfc, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xfc, 0xfc, 0x06, 0x06, 0x07, 0x03, 0x03, 0x01, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0x1f, 0x3c, 0x70, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0x60, 0x30, 0x38, 0x0f, 
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void OLED_Draw_Bitmap() {

  oled.clear();
  oled.drawBitmap(0, 0, Taupunt_bitmap, 128, 64);
  oled.update();
}

void OLED_Draw_Logo() {

  oled.clear();
  oled.invertText(false);
  OLED_println("Taupunktl",7,0); 
    drawSonderzeichen(2);// Sonderzeichen ü
      OLED_print("fter V" + String(Software_version));

  oled.drawBitmap(0, 0, Taupunt_bitmap, 128, 53);

  oled.update();
}
